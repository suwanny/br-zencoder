// Generated by CoffeeScript 1.6.2
(function() {
  var Account, Input, Job, Notification, Output, Reports, Request, Url, Zencoder, querystring, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Request = require('request');

  Url = require('url');

  _ = require('lodash');

  querystring = require('querystring');

  Zencoder = (function() {
    Zencoder.create = function(apiKey) {
      return {
        Job: new Job(apiKey),
        Input: new Input(apiKey),
        Output: new Output(apiKey),
        Notification: new Notification(apiKey),
        Account: new Account(apiKey),
        Reports: new Reports(apiKey)
      };
    };

    function Zencoder(apiKey, apiVersion) {
      this.apiKey = apiKey;
      this.apiVersion = apiVersion != null ? apiVersion : 2;
      this.base_url = "https://app.zencoder.com/api/v" + this.apiVersion;
      this.api_version = 2;
      this.defOptions = {
        json: true,
        strictSSL: false,
        timeout: 120000,
        headers: {
          'Zencoder-Api-Key': this.apiKey
        }
      };
    }

    Zencoder.prototype.get = function(path, params, callback) {
      var url;

      url = this.base_url + path;
      if (typeof params === 'function') {
        callback = params;
      } else {
        url += "?" + querystring.stringify(params);
      }
      return Request.get(url, this.defOptions, function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return callback(err, {
          code: res.statusCode,
          body: body
        });
      });
    };

    Zencoder.prototype.put = function(path, callback) {
      var url;

      url = this.base_url + path;
      return Request.put(url, this.defOptions, function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return callback(err, {
          code: res.statusCode,
          body: body
        });
      });
    };

    Zencoder.prototype.post = function(path, body, callback) {
      var options, url;

      url = this.base_url + path;
      if (typeof body !== 'string') {
        body = JSON.stringify(body);
      }
      options = _.extend(this.defOptions, {
        body: body
      });
      return Request.post(url, options, function(err, res, body) {
        if (err) {
          return callback(err);
        }
        return callback(err, {
          code: res.statusCode,
          body: body
        });
      });
    };

    return Zencoder;

  })();

  Job = (function(_super) {
    __extends(Job, _super);

    function Job(apiKey, apiVersion) {
      this.apiKey = apiKey;
      this.apiVersion = apiVersion != null ? apiVersion : 2;
      Job.__super__.constructor.call(this, this.apiKey, this.apiVersion);
    }

    Job.prototype.list = function(params, cb) {
      if (params == null) {
        params = {};
      }
      return this.get('/jobs.json', params, cb);
    };

    Job.prototype.listByState = function(state, cb) {
      return this.list({
        state: state
      }, cb);
    };

    Job.prototype.create = function(job, cb) {
      return this.post('/jobs', job, cb);
    };

    Job.prototype.details = function(jobId, cb) {
      return this.get("/jobs/" + jobId + ".json", cb);
    };

    Job.prototype.resubmit = function(jobId, cb) {
      return this.put("/jobs/" + jobId + "/resubmit.json", cb);
    };

    Job.prototype.cancel = function(jobId, cb) {
      return this.put("/jobs/" + jobId + "/cancel.json", cb);
    };

    Job.prototype.progress = function(jobId, cb) {
      return this.get("/jobs/" + jobId + "/progress.json", cb);
    };

    return Job;

  })(Zencoder);

  Input = (function(_super) {
    __extends(Input, _super);

    function Input(apiKey, apiVersion) {
      this.apiKey = apiKey;
      this.apiVersion = apiVersion != null ? apiVersion : 2;
      Input.__super__.constructor.call(this, this.apiKey, this.apiVersion);
    }

    Input.prototype.details = function(inputId, cb) {
      return this.get("/inputs/" + inputId + ".json", cb);
    };

    Input.prototype.progress = function(inputId, cb) {
      return this.get("/inputs/" + inputId + "/progress.json", cb);
    };

    return Input;

  })(Zencoder);

  Output = (function(_super) {
    __extends(Output, _super);

    function Output(apiKey, apiVersion) {
      this.apiKey = apiKey;
      this.apiVersion = apiVersion != null ? apiVersion : 2;
      Output.__super__.constructor.call(this, this.apiKey, this.apiVersion);
    }

    Output.prototype.details = function(outputId, cb) {
      return this.get("/outputs/" + outputId + ".json", cb);
    };

    Output.prototype.progress = function(outputId, cb) {
      return this.get("/outputs/" + outputId + "/progress.json", cb);
    };

    return Output;

  })(Zencoder);

  Notification = (function(_super) {
    __extends(Notification, _super);

    function Notification(apiKey, apiVersion) {
      this.apiKey = apiKey;
      this.apiVersion = apiVersion != null ? apiVersion : 2;
      Notification.__super__.constructor.call(this, this.apiKey, this.apiVersion);
    }

    Notification.prototype.list = function(params, cb) {
      if (params == null) {
        params = {};
      }
      return this.get('/notifications', params, cb);
    };

    return Notification;

  })(Zencoder);

  Account = (function(_super) {
    __extends(Account, _super);

    function Account(apiKey, apiVersion) {
      this.apiKey = apiKey;
      this.apiVersion = apiVersion != null ? apiVersion : 2;
      Account.__super__.constructor.call(this, this.apiKey, this.apiVersion);
    }

    Account.prototype.create = function(params, cb) {
      return this.post('/account', params, cb);
    };

    Account.prototype.details = function(cb) {
      return this.get('/account', cb);
    };

    Account.prototype.integration = function(cb) {
      return this.put('/account/integration', cb);
    };

    Account.prototype.live = function(cb) {
      return this.put('/account/live', cb);
    };

    return Account;

  })(Zencoder);

  Reports = (function(_super) {
    __extends(Reports, _super);

    function Reports(apiKey, apiVersion) {
      this.apiKey = apiKey;
      this.apiVersion = apiVersion != null ? apiVersion : 2;
      Reports.__super__.constructor.call(this, this.apiKey, this.apiVersion);
    }

    return Reports;

  })(Zencoder);

  module.exports = Zencoder;

  module.exports.Job = Job;

  module.exports.Input = Input;

  module.exports.Output = Output;

  module.exports.Notification = Notification;

  module.exports.Account = Account;

  module.exports.Reports = Reports;

}).call(this);
